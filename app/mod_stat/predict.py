import pandas as pd
import statsmodels.formula.api as sm
import numpy as np
from sklearn.externals import joblib
from app.mod_db import *

def predict(csv):
    """
    Generates new predictions from an uploaded CSV file and returns a pandas dataframe. 
    """

    # Loads the serialised analytic model. 
    lrm = joblib.load("app/mod_stat/model.pkl")    

    # Reads the CSV file. 
    df = pd.read_csv(csv)
    
    # Generates predicted values in a new column.     
    df["predicted"] = list(map(lambda x: int(lrm.predict(x)[0]), df["associated"]))
    
    return df

def predict_all():
    """ 
    Populates all rows of the database with predicted occupancy counts 
    generated by the predictive model (if they contain log data).
    Only intended to be run once; further predictions are generated by 
    predict() whenever a new file is uploaded. 
    """
    
    # Loads the serialised analytic model. 
    lrm = joblib.load("app/mod_stat/model.pkl")    
    
    # Queries each unique associated count value from the database.
    results = Counts.select(Counts.counts_associated).distinct()
    
    count_values = []
    for result in results:
        if result.get_result()["counts_associated"] != "None":
            count_values.append(result.get_result()["counts_associated"])

    # For each unique associated count value:
    for count in count_values:
        # Updates every row of the database having that value with a corresponding predicted count. 
        query = Counts.update(counts_predicted=int(lrm.predict(int(count))[0])).where(Counts.counts_associated == count)
        query.execute()
